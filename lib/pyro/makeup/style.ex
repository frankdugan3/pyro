defmodule Pyro.Makeup.Style do
  @moduledoc """
  Tooling to configure and generate light/dark `Makeup` HTML stylesheets for syntax highlighting in code block components.

  If you simply wish to use a built-in theme, check out [the makeup demo](https://elixir-makeup.github.io/makeup_demo/index.html). You can see previews of each style for most supported languages.

  For inspiration on customizing overrides, check out the [built-in Makeup styles](https://github.com/elixir-makeup/makeup/blob/master/lib/makeup/styles/html/style_map.ex) and adapt them suitably.

  The stylesheets can be configured in your override file by passing a built-in or custom style function:

  ```
  defmodule MyApp.MyOverrides do
    use Pyro.Overrides,
      makeup_light: &Makeup.Styles.HTML.AutumnStyle.style/0,
      makeup_dark: &Makeup.Styles.HTML.MonokaiStyle.style/0
  ```

  > #### Automated Generation {: .warning}
  >
  > The stylesheet will be automatically generated by the Pyro compiler and inserted into `assets/css/pyro.css`, so aside from override configuration this module can be ignored.
  """

  @doc false
  @spec stylesheet(module()) :: binary()
  def stylesheet(override_module) do
    light =
      apply(override_module, :makeup_light, []).() || Makeup.Styles.HTML.DefaultStyle.style()

    dark = apply(override_module, :makeup_dark, []).() || Makeup.Styles.HTML.DefaultStyle.style()

    """
    /* ### MAKEUP STYLES ### */

    /* Light Style */

    #{stylesheet(light, "makeup")}

    /* Dark Style */

    #{stylesheet(dark, "dark .makeup")}
    """
  end

  defp stylesheet(style, class) do
    Makeup.stylesheet(style, class)
  end
end
